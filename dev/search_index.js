var documenterSearchIndex = {"docs":
[{"location":"#Justly","page":"Justly","title":"Justly","text":"","category":"section"},{"location":"","page":"Justly","title":"Justly","text":"","category":"page"},{"location":"","page":"Justly","title":"Justly","text":"Modules = [Justly]","category":"page"},{"location":"#Justly.Chord","page":"Justly","title":"Justly.Chord","text":"Chord(dictionary::Dict)\n\nA Julia representation of a chord. Pass a vector of Chords to edit_song.\n\n\n\n\n\n","category":"type"},{"location":"#Justly.edit_song-Tuple{Any}","page":"Justly","title":"Justly.edit_song","text":"function edit_song(chords::Vector{Chord}; ramp = 0.1s, options...)\n\nOpen an interactive interface where you can interactively write Justly text.  Once you have finished writing, you can copy the results to the clipboard as YAML. Then, you can use make_schedule to play your song. Might be slow at first while Julia is compiling.\n\nchords should be a vector of [Chord]s to start editing. ramp is the time it takes for a note to switch from on to off, in time units (like s). options will be passed to make_schedule.\n\nThe first interval in the chord will modulate the key, and tells how many beats before the next key change. You can set beats to 0 to overlap, or to a negative number to \"travel back in time\". The rest of the intervals in the chord will play notes with a given duration. Their interval will show their relationship to the key. You can use words to as a way to keep track of your position in a song, or to make performance notes. For more information, see the README.\n\njulia> using Justly\n\njulia> chords = Chord[];\n\njulia> edit_song(chords; test = true)\n\n\n\n\n\n","category":"method"},{"location":"#Justly.make_schedule-Tuple{Any}","page":"Justly","title":"Justly.make_schedule","text":"function make_schedule(song;\n    beat_duration = 0.6s,\n    initial_key = 220Hz,\n    make_envelope = pedal,\n    sample_rate = 44100Hz,\n    volume = 0.15,\n    wave = SawTooth(7)\n)\n\nPlay music in Justly notation. \n\nsong can be in YAML or a list of Chords.\nbeat_duration is duration of a beat with time units (like s).\ninitial_key is initial key of your song, in frequency units (like Hz). \nmake_envelope is should be a function to make an envelope, like pluck or pedal.\nsample_rate is the sample rate in frequency units (like Hz).\nvolume will be the volume that a single voice is played at, ranging from 0-1.\nwave should be a function which takes an angle in radians and returns an amplitude between 0 and 1. \n\nFor example, to create a simple I-IV-I figure,\n\njulia> using Justly\n\njulia> using YAML: load\n\njulia> make_schedule(load(\"\"\"\n            - words: \"I\"\n              notes:\n                - {}\n                - interval: \"3/2\"\n                - interval: \"5/4o1\"     \n            - words: \"IV\"\n              interval: \"2/3\"\n              notes:\n                - interval: \"3/2\"\n                - interval: \"5/4o1\"\n                - interval: \"1o2\"\n            - words: \"I\"\n              interval: \"3/2\"\n              notes:\n                - {}\n                - interval: \"3/2\"\n                - interval: \"5/4o1\"\n              \n         \"\"\"))\n1.85 s 44100.0 Hz AudioSchedule\n\nNote also that Justly will unnest top-level lists, so you use YAML anchors to repeat themes.\n\njulia> make_schedule(load(\"\"\"\n            - &fifth\n                - notes:\n                    - {}\n                    - interval: \"3/2\"\n            - *fifth\n        \"\"\"))\n1.25 s 44100.0 Hz AudioSchedule\n\n\n\n\n\n","category":"method"},{"location":"#Justly.pedal-Tuple{Any}","page":"Justly","title":"Justly.pedal","text":"pedal(duration; slope = 1 / 0.1s, peak = 1, overlap = 1/2)\n\nA sustain with steep ramps on either side. Overlap is the proportion of the ramps that overlap.\n\n\n\n\n\n","category":"method"},{"location":"#Justly.pluck-Tuple{Any}","page":"Justly","title":"Justly.pluck","text":"pluck(duration; decay = -2.5 / s, slope = 1 / 0.005s, peak = 1)\n\nThe default envelope function used for make_schedule. An exponential decay with ramps on either side.\n\n\n\n\n\n","category":"method"}]
}
