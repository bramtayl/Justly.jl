var documenterSearchIndex = {"docs":
[{"location":"#Justly","page":"Public interface","title":"Justly","text":"","category":"section"},{"location":"","page":"Public interface","title":"Public interface","text":"","category":"page"},{"location":"","page":"Public interface","title":"Public interface","text":"Modules = [Justly]","category":"page"},{"location":"#Justly.edit_song-Tuple{Any}","page":"Public interface","title":"Justly.edit_song","text":"function edit_song(song_file; \n    test = false, \n    keywords...\n)\n\nUse to edit songs interactively.  The interface might be slow at first while Julia is compiling.\n\nsong_file is a YAML string or a vector of Chords. Will be created if it doesn't exist.\nkeywords will be passed to read_justly.\n\nFor more information, see the README.\n\njulia> using Justly\n\njulia> edit_song(joinpath(pkgdir(Justly), \"examples\", \"wondrous_love.justly\"); test = true)\n\n\n\n\n\n","category":"method"},{"location":"#Justly.pluck-Tuple{Any}","page":"Public interface","title":"Justly.pluck","text":"pluck(duration; ramp_duration = 0.05s, decay_rate = -4/s)\n\nYou can use pluck to make an envelope with an exponential decay_rate and ramps at the beginning and end.\n\nramp_duration is the duration of the ramps at the beginning and end.\ndecay_rate is the continuous negative decay rate.\n\n\n\n\n\n","category":"method"},{"location":"#Justly.read_justly-Tuple{Any}","page":"Public interface","title":"Justly.read_justly","text":"function read_justly(song_file;\n    volume = 0.2,\n    frequency = 200.0,\n    tempo = 200.0,\n    wave = SawTooth(7),\n    make_envelope = pluck\n    \n)\n\nCreate a Song from a song file.\n\nvolume is the starting volume of a single voice, between 0 and 1. Use this if the user doesn't specify a starting volume in the song file. To avoid peaking, lower the volume for songs with many voices.\nfrequency is the starting frequency, in Hz. Use this if the user doesn't specify a starting frequency in the song file.\ntempo is the tempo of the song, in beats per minute. This is the tempo of 1 indivisible beat, so for songs which subdivide notes, you will need to multiply the tempo accordingly.\nwave is a function which takes an angle in radians and returns an amplitude between -1 and 1. Use this to change the timbre of the sound. The default is SawTooth(7), a saw-tooth wave with the first 7 fundamental frequencies.\nmake_envelope is a function which takes a duration in seconds and returns an envelope. The default is pluck.\n\njulia> using Justly\n\njulia> song = read_justly(joinpath(pkgdir(Justly), \"examples\", \"simple.justly\"));\n\njulia> print(song)\nFrequency: 220.0 Hz\nVolume: 0.2\nTempo: 200.0 bpm\n# I\n1: 1, 5/4 at 2.0, 3/2\n# IV\n2/3: 3/2, 1o1 at 2.0, 5/4o1\n# I\n3/2 for 2: 1 for 2, 5/4 for 2 at 2.0, 3/2 for 2\n\nYou can add a song to an AudioSchedule\n\njulia> using AudioSchedules: AudioSchedule\n\njulia> audio_schedule = AudioSchedule()\n0.0 s 44100.0 Hz AudioSchedule\n\njulia> push!(audio_schedule, song)\n\njulia> audio_schedule\n1.27 s 44100.0 Hz AudioSchedule\n\nYou can convert a song directly to a SampleBuf, with a default sample rate of 44100Hz.\n\njulia> using SampledSignals: SampleBuf\n\njulia> SampleBuf(song)\n56007-frame, 1-channel SampleBuf{Float64, 1}\n1.27s sampled at 44100.0Hz\n▅▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▆▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▆▆▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆▅▆▆▆▆▆▆▅▅▅▅▅▅▅▄▄▃\n\n\n\n\n\n","category":"method"}]
}
