var documenterSearchIndex = {"docs":
[{"location":"#Justly","page":"Public interface","title":"Justly","text":"","category":"section"},{"location":"","page":"Public interface","title":"Public interface","text":"","category":"page"},{"location":"","page":"Public interface","title":"Public interface","text":"Modules = [Justly]","category":"page"},{"location":"#Justly.DEFAULT_INSTRUMENTS","page":"Public interface","title":"Justly.DEFAULT_INSTRUMENTS","text":"DEFAULT_INSTRUMENTS\n\nThe default [Instrument]s available in read_justly and edit_justly, namely,\n\n[Instrument(pulse!, \"pulse!\"), Instrument(sustain!, \"sustain!\")]\n\nSee pulse! and sustain!.\n\n\n\n\n\n","category":"constant"},{"location":"#Justly.Instrument","page":"Public interface","title":"Justly.Instrument","text":"Instrument(note_function!, name)\n\nUse an Instrument to play a note in the style of an instrument.\n\nnote_function! will be called as follows:\n\nnote_function!(audio_schedule, start_time, duration, volume, frequency)\n\nwhere\n\naudio_schedule is an AudioSchedules.AudioSchedule to add the note to.\nstart_time is a start time in seconds, like 0.0s.\nduration is a duration in seconds, like 1.0s\nvolume is a ratio between 0 and 1.\nfrequency is the frequency of the note in hertz, like 440.0Hz.\n\n\n\n\n\n","category":"type"},{"location":"#Justly.default_wave-Tuple{Any}","page":"Public interface","title":"Justly.default_wave","text":"default_wave(x)\n\nA wave with many overtones, namely,\n\nsin(x) +\n0.2sin(2x) +\n0.166sin(3x) +\n0.133sin(4x) +\n0.1sin(5x) +\n0.066sin(6x) +\n0.033sin(7x)\n\n\n\n\n\n","category":"method"},{"location":"#Justly.edit_justly","page":"Public interface","title":"Justly.edit_justly","text":"function edit_justly(song_file, instruments = DEFAULT_INSTRUMENTS; \n    test = false\n)\n\nUse to edit songs interactively.  The interface might be slow at first while Julia is compiling.\n\nsong_file is a YAML file. Will be created if it doesn't exist.\ninstruments are a vector of Instruments, with the default DEFAULT_INSTRUMENTS.\n\nFor more information, see the README.\n\njulia> using Justly\n\njulia> edit_justly(joinpath(pkgdir(Justly), \"examples\", \"simple.yml\"))\n\n\n\n\n\n","category":"function"},{"location":"#Justly.pulse!-NTuple{5, Any}","page":"Public interface","title":"Justly.pulse!","text":"pulse!(audio_schedule, start_time, duration, volume, frequency;\n    ramp_duration = 0.07s,\n    decay_rate = -4/s\n)\n\nA function for an Instrument.\n\nUses the wave function default_wave. Add an envelope with an exponential decay_rate and ramps of ramp_duration at the beginning and end.\n\n\n\n\n\n","category":"method"},{"location":"#Justly.read_justly","page":"Public interface","title":"Justly.read_justly","text":"read_justly(file, instruments = DEFAULT_INSTRUMENTS)\n\nCreate a Song from a song file.\n\ninstruments are a vector of Instruments, with the default DEFAULT_INSTRUMENTS.\n\njulia> using Justly\n\njulia> song = read_justly(joinpath(pkgdir(Justly), \"examples\", \"simple.yml\"));\n\nYou can add a song to an AudioSchedule at a start time. You can use this to overlap multiple songs at differnt times.\n\njulia> using AudioSchedules: AudioSchedule, Hz, s\n\njulia> audio_schedule = AudioSchedule(sample_rate = 44100Hz)\n0.0 s 44100.0 Hz AudioSchedule\n\njulia> push!(audio_schedule, song, 0.0s)\n\njulia> push!(audio_schedule, song, 1.0s)\n\njulia> audio_schedule\n2.27 s 44100.0 Hz AudioSchedule\n\n\n\n\n\n","category":"function"},{"location":"#Justly.sustain!-NTuple{5, Any}","page":"Public interface","title":"Justly.sustain!","text":"sustain!(audio_schedule, start_time, duration, volume, frequency;\n    ramp_duration = 0.07s\n)\n\nA function for an Instrument.\n\nUses the wave function default_wave. Add an envelope with ramps of ramp_duration at the beginning and end.\n\n\n\n\n\n","category":"method"}]
}
